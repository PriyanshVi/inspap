<template>
  <div class="chat-container">
    <div class="chat-header">
      <h3>Negotiation Chat</h3>
      <button @click="$emit('close-chat')">Close</button>
    </div>
    <div class="chat-messages">
      <div
        v-for="message in messages"
        :key="message.id"
        :class="{ 'my-message': message.sender_id === currentUserId }"
      >
        {{ message.message }}
        <small v-if="isValidDate(message.timestamp)"> 
          {{ new Date(message.timestamp).toLocaleTimeString() }} 
        </small>
      </div>
    </div>
    <div class="chat-input">
      <input type="text" v-model="newMessage" @keyup.enter="sendMessage">
      <button @click="sendMessage">Send</button>
    </div>
  </div>
</template>

<script>
export default {
  props: ['proposal'],
  data() {
    return {
      newMessage: '',
      messages: [],
      currentUserId: null,
      token: localStorage.getItem('auth_token'),
    };
  },
  async mounted() {
    this.token = localStorage.getItem('auth_token');
    this.currentUserId = await this.getCurrentUserId();
    this.fetchMessages(); // Fetch messages once on component mount
  },
  methods: {
    async getCurrentUserId() {
      try {
        const response = await fetch('http://localhost:5000/api/user', {
          headers: {
            'Authentication-token': this.token
          }
        });
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        return data.id;
      } catch (error) {
        console.error('Error fetching user ID:', error);
        return null;
      }
    },
    sendMessage() {
      if (this.newMessage.trim() !== '') {
        fetch(`http://localhost:5000/api/campaigns/${this.proposal.campaign_id}/proposals/${this.proposal.id}/chat`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authentication-token': this.token,
            },
            body: JSON.stringify({
              message: this.newMessage
            }),
          })
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return this.fetchMessages();
          })
          .then(() => {
            this.newMessage = ''; // Clear input field after sending
          })
          .catch(error => {
            console.error('Error sending message:', error);
          });
      }
    },
    async fetchMessages() {
      try {
        const response = await fetch(`http://localhost:5000/api/campaigns/${this.proposal.campaign_id}/proposals/${this.proposal.id}/chat`, {
          headers: {
            'Content-Type': 'application/json',
            'Authentication-token': this.token,
          }
        });
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        this.messages = data.messages; // Access messages from the "messages" key
        console.log("Fetched messages:", this.messages);
      } catch (error) {
        console.error('Error fetching chat messages:', error);
      }
    },
    isValidDate(dateString) {
      const date = new Date(dateString);
      return !isNaN(date.getTime()); 
    }
  },
};
</script>
<style scoped>
.chat-container {
  border: 1px solid #ccc;
  width: 300px;
  display: flex;
  flex-direction: column;
}

.chat-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 5px;
  background-color: #f0f0f0;
}

.chat-messages {
  flex-grow: 1;
  height: 200px; 
  overflow-y: auto; 
  padding: 10px;
}

.chat-message {
  margin-bottom: 5px; 
}

.my-message {
  text-align: right;
}

.my-message .chat-message { 
  background-color: #dcf8c6; 
  padding: 5px 10px;
  border-radius: 8px; 
}

.chat-input {
  display: flex;
  padding: 5px;
}

.chat-input input[type="text"] {
  flex-grow: 1;
  margin-right: 5px;
  padding: 5px; 
  border: 1px solid #ccc; 
}

.chat-input button {
  padding: 5px 10px; 
  background-color: #0084ff; 
  color: white;
  border: none; 
  border-radius: 5px; 
  cursor: pointer; 
}
</style>















Share


You said:
@auth_required('token')
    @marshal_with(chat_message_fields, envelope='messages')
    def get(self, campaign_id, proposal_id):
        """
        Get chat messages for a proposal.
        """
        print(f"GET request received for campaign_id: {campaign_id}, proposal_id: {proposal_id}")

        try:
            user = current_user
            print(f"User: {user}")

            proposal = Proposal.query.filter_by(id=proposal_id, campaign_id=campaign_id).first()
            if not proposal:
                print(f"Proposal not found for campaign_id: {campaign_id}, proposal_id: {proposal_id}")
                return make_response(jsonify({'message': 'Proposal not found'}), 404)
            print("Proposal found")

            influencer = Influencer.query.filter_by(user_id=user.id).first()
            brand = Brand.query.filter_by(user_id=user.id).first()
            print(f"Influencer: {influencer}, Brand: {brand}")

            if not influencer and not brand:
                print("User not found (neither influencer nor brand)")
                return make_response(jsonify({'message': 'User not found'}), 404)
            print("User found")

            if (influencer and proposal.influencer_id != influencer.id) and \
               (brand and proposal.campaign.brand_id != brand.id):
                print("Unauthorized access to proposal")
                return make_response(jsonify({'message': 'Unauthorized'}), 403)
            print("Authorized access")

            messages = ChatMessage.query.filter(
                ChatMessage.proposal_id == proposal_id,
            ).order_by(ChatMessage.timestamp).all()
            print(f"Retrieved {len(messages)} messages")

            return messages

        except Exception as e:
            print(f"An error occurred: {e}")
            return make_response(jsonify({'message': 'Internal Server Error'}), 500)

